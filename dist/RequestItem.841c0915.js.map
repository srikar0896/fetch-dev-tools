{"version":3,"sources":["../src/lib/dom.ts","../src/lib/template.ts","../src/lib/modify-template.ts","../src/lib/directive.ts","../src/lib/part.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/template-factory.ts","../src/lib/render.ts","../src/lib/default-template-processor.ts","src/lit-html.ts","../src/lib/shady-render.ts","../src/lib/updating-element.ts","../src/lib/decorators.ts","../src/lib/css-tag.ts","src/lit-element.ts","RequestItem.js"],"names":["RequestItem","LitElement","constructor","console","log","request","properties","attribute","reflect","type","Object","styles","handleResolve","e","myEvent","CustomEvent","detail","request_id","id","bubbles","composed","dispatchEvent","render","name","customElements","define"],"mappings":";;AiBAA;;AAGA,MAAMA,WAAN,SAA0BC,sBAA1B,CAAqC;AACnCC,EAAAA,WAAW,GAAE;AACX;AFLJ,ALmBA,APnBA,AHAA,AIAA,AGkBA,AEAA,AJAA,ACAA,ALlBA,AYAA,AIMIC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,OAAjB;AfYJ,AMCA,ASZG;APPH,AHmBA,AEAA,AJGA,ACFA;AJpBA,AMAA,ASSE,aAAWC,UAAX,GAAwB;AVW1B,AECA,AJrBA,ACAA,AWUI,WAAO;AACLD,MAAAA,OAAO,EAAE;AVWf,AEtBA,AQWiBE,QAAAA,SAAS,EAAE,IAAb;AHXf,AGWkCC,QAAAA,OAAO,EAAE,IAA5B;AVYf,AUZiDC,QAAAA,IAAI,EAAEC;AAAxC;AFAR,ARaP,AUdW,KAAP,CFCS,2BAA2B,GACnC,wBAAwB,QAAQ,CAAC,SAAlC,IACC,aAAa,aAAa,CAAC,SAFzB;AEEJ;AFEH,ARfA,MQeM,iBAAiB,GAAG,MAAM,EAAhC;AZKA,AcLE,MdKI,OcLOC,GdKG,GAAG,AcLjB,GAAmB,CdKE,OAAJ,EAAnB;AYHM,AZUN,AHLA,AIsBA,AHxBA,AYNA,AIEI,MFCS,KEDF,IFCL,CAAgB,eEDP;AFMb,EAAA,WAAA,CAAY,OAAZ,EAA6B,SAA7B,EAA8C;AAC5C,ALAJ,QKAQ,SAAS,KAAK,iBAAlB,EAAqC;AACnC,AfCC,AEXP,AM6BA,MRlBa,MeDD,IAAI,EfCS,GeDb,AfCgB,CeAlB,MfAyB,MAAP,KAAkB,WAAlB,IACxB,MAAM,CAAC,cAAP,IAAyB,IADD,IAEvB,EeHO,CAAN,GfGK,CAAC,cAAP,CAA4C,yBAA5C,KACG,SAHD;AeCF,AfIL,AIkBO,AQtBP,APZA,ACAA,ALUO,MGwBM,AHxBA,MAAM,EGwBE,CHxBC,EGwBE,EAAjB,KHxBwB,MAAM,CAAC,IAAI,CAAC,MAAL,EAAD,CAAN,CAAsB,KAAtB,CAA4B,CAA5B,CAA8B,IAAtD;ASED,ANwBN,AHxBA,MSAa,wBAAP,CAA+B;AKCjC,ADqBJ,AJrBE,ARPF,AONA,AGaA,MEqBM,AZ5BA,GaOG,OAAL,GAAe,GbPG,GY4BG,AZ5BA,CaOrB,EDsBA,CAAC,OAAD,EAAkB,KAAlB,KAAqD;ACrBtD,ADsBG,AZ9BuB,AM2BvB,AFzBN,EQ4BM,CCjCgB,CAapB,ETRI,EQ4BM,CAAC,ANHG,UFzBG,GAAG,CQ4BhB,CAAsB,ANHtB,CAA0B,CFzBN,IQ4BpB,CAA6B,ANH7B,EAAgD,KMGhD,EAAsC,ER5BZ,GQ4B1B,AR5BN,EQ2ByD,CAEnD;ACpBJ,ADqBI,AZhCN,AUSA,AJmBE,AHxBF,ACAA,AOJA,ML4BM,AK5BA,CAAC,YL4BY,GAAG,UK5BtB,GACI,CL2BgC,AK3BR,CL2BS,GAAf,AK3BlB,CL2BqC,CK3BJ,IAAjC,CL2B2C,CAAC,GK3BU,CL2BpC,CAApB,EK5BF;ACiCM,AZ/BN,AOCO,MAAM,KAAK,GAAG,IAAI,OAAJ,EAAd;AK+BD,AVDC,AK5BP,AGKA,AJmBE,AKyFK,MTrFM,AIJP,AKyFO,OTrFO,GAAG,EAAhB,CIJY,GKyFU,ELzFL,CKyFmC,QLzFzD,EAAiC;AOjBjC,ADuBI,ANLF,APpBG,AY8GL,EAAA,EL1FE,EOlBE,AdFO,OY8GA,CAAC,EE5GZ,AdFqB,COoBN,EOlBD,AdFU,AY8Gb,CL1FO,CK0FU,IAAjB,CZ9GoB,CY8GW,KZ9GL,KAAhC;AcGH,ADuBE,AdrBC,AOrBP,AKiBA,AJoBM,AHvBA,AQiHF,Mb1GS,AQgBP,AHvBO,EUKL,IF4GI,CE5GC,GF4GT,EL1Fc,CRhBQ,CQgBN,ERfhB,AKRE,CLQD,AKRwB,CUKrB,APkBgB,KOlBK,EPkBT,CRfhB,CQcgB,CRbf,IeJD,CfGA,CeHoC,CfKnC,GAAA,GAAiB,IAFlB,EAGC,MAAA,GAAoB,IAHrB,KAGmC;AeLjC,AfMA,AQYA,AHlBJ,ACNI,ALIC,AY8GD,ER5GJ,IGkBI,AFxBO,ALIA,GDQA,EasGF,ER5GT,CLMgB,AKLZ,CGiBS,EAAE,APpBO,CY8GlB,CbtGiB,CMZjB,ALIqB,COoBN,AFxBM,CNYrB,AKNJ,ELM0B,AQYX,AHjBS,AJHK,MAAJ,CAAW,EIEpC,CJFuC,CIInC,KJJyC,EIE7C,EAE0B,AJJuB,UAAU,EAAlC,CAApB;AcGD,ADsBA,AdhBE,AYRR,AJiBoB,AHrBD,ACKjB,ALAF,AY6GQ,EP7GN,GEgBE,IMOS,AT5BM,CLYL,CAAC,EMPb,CQuBI,AdhBY,AMNZ,CO4GS,CRlHI,GLYK,AKZ4B,CLY3B,AasGL,CRlHD,ACKjB,EACmC,AO4Gd,EAAH,GAAQ,CP7G1B,ENOM,AMNyD,CO4GzD,GP7GN,EAEI,SAFJ,EAEgC;ASA5B,ADsBD,AJtBH,AVMM,AOdD,AC0BH,AHjBA,ACAA,CQWJ,CJZE,EVMM,AQYJ,ED1BS,GFSJ,ACAA,CSDC,GfMO,CAAC,EMLd,CCToB,AFSpB,CGiBc,CAAC,AFjBA,CCTS,AFSR,EGiBhB,CAAmB,ED1BI,CPcnB,AMLJ,CNK2B,CUNH,ALCxB,CKAE,AHT4D,AC0BrC,CAAC,ERZtB,EAA+B,AQYnC,EElBwB,AFkBQ,COlB9B,CLCkB,CKDe,CfM/B,EUNoB,EACU,KFiBlC,EElBwB,EAEtB,OAFsB,EAEA;AKDpB,ALEJ,AVII,AOdN,AKMF,AJoBG,AHjBC,ACAA,AO0GE,IbrGE,KAAK,AObP,AFQG,ACAA,CICC,CGyGC,CbrGK,CeNH,AfML,CObG,CDQP,CICY,CGyGV,CR1GF,ACAc,CICC,AHTH,EFQK,EKCE,AHTjB,CQOE,ALEgB,AJDpB,CICmB,CAAnB,CKFuB,ARNrB,EAAE,CFOJ,CUD2B,KRNhB,KAAP,GQMmB,EAAnB,ARNiB,QAAjB,IAA6B,OAAO,KAAP,KAAiB,UAAhD,CAFJ;AO+BF,AdhBO,AOZN,AFOG,ACAA,AO0GE,AGpIN,CTeO,KOgCD,GTrBG,ACAA,EO0GE,EP1GP,GDAA,ACAY,AO0GV,GR1Ga,CCAf,MDAA,CSqBuB,GACvB,CAAC,OAAD,EAAkB,UAAlB,KAAiD;ACvB7C,ADwBF,AJtBF,AVKC,AY7CL,AJyDE,AHjBC,ACAC,AO0GI,Cb/GD,KQsBD,EMKM,AJtBJ,CJAC,ISFI,CLEC,AFiBA,GAAG,CFjBb,CIAe,EJAE,CIAjB,EKFI,ALEgB,CKFC,KPmBK,AFjB1B,CEiB2B,KOnBvB,CAA6B,KAAK,CPmBzB,CAA2B,GAA3B,CAA+B,COnBxC,KPmB8C,CAAC,OAAtC,CAAf;AOlBK,ADuBM,AJrBP,AVMN,AMNG,ALJI,AY8GC,AGpIR,IF+Ca,EbzBA,CcDP,CD0BM,IJrBA,CKFC,QLEQ,GAAG,ETJS,ESIL,CTJQ,OAA7B,gBSIiB,CAAsB,OAAtB,EAA+B,IAAI,CAAC,KAAL,CAAW,CAAX,CAA/B,EAA8C,OAA9C,CAAlB;AKDE,ADsBW,AJpBb,AFgBJ,AHhBA,ACCA,ALJF,AY6GQ,ER1GN,ESoBiB,ENJb,EHhBE,CAAC,IUFI,ALEA,CFgBC,CHhBN,AQ0GO,ER1GoB,EGgBhB,CK0FC,EH1GE,CAAC,CKFf,AF4GgB,GE5GG,CLErB,AFgBJ,AK0Fa,EL1Fe,COlBtB,AF4GuB,KAAhB,GAAwB,IAAI,CAAC,SAAL,CAAe,KAAf,CAA/B;AE3GD,ADqBK,AJnBP,AHVE,AC0BH,AHhBA,AQkGA,AG5HJ,MF6C+B,AP7BlB,EFUL,CAAC,EGgBE,CHhBC,CAAR,GSmBE,AP7BiB,GAAI,AC0BvB,KD1BsB,IAA+C;AQSpE,ADqBC,AP7BJ,AC0BC,AQ3CH,GR8BsD,CAepD,KMCW,AP7BJ,KAAK,CAAC,OAAN,CAAc,KAAd,KACH;AO6BE,AJpBJ,AHRE,AC2BJ,AHnBE,AQ0GA,AGrIJ,GTmBO,CO4BC,CP5BC,GO2BI,AJnBL,CLAC,CERK,CMkHH,GH1GG,AHRK,CFQJ,CQ0GX,GH1Ge,AHRa,AFQ5B,CER6B,EGQ7B,CLAmB,CKAC,EHRe,CAAC,CFQZ,OERI,AFQ5B,CERG,CAFL,AFUmC;AUDjC,ADsBI,AJpBF,AHRL,AFQK,AQ0GH,AGtIH,CTgBO,EMyGoD,CCzEnD,MTpBE,CUFC,CDoBE,CJlBA,CAAC,ALAA,EUFE,ELEE,CLAC,QUFf,CVEE,EAAwB,IKAhB,CAAc,OAAd,EAAuB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAvB,EAAsC,OAAO,CAAC,YAA9C,CAAD,CAAP;AKDH,ALEE,AHPL,AFOQ,ACAN,AU7BF,EV6BE,MDAM,CCAC,GDAG,ACAH,CDAI,QAAL,CAAc,MAAM,CAAC,CAAD,CAApB;ASoBA,AZ5BF,AM0BJ,AHjBK,ACAH,ALLE,AY+GJ,AGxIF,EHwIE,IZ/GW,EOsBL,CN1BQ,CISN,CEiBC,AFjBA,GEiBG,AFjBA,ALLR,CAAe,AY+GN,CAAC,GP1GG,CEiBC,CAAC,AKyFN,EAAqB,GP1GtB,CAAa,AO0GZ,CLzFD,CAAe,AKyFqB,GXnH5C,CACF,AMyBU,AFjBA,CEiBoB,EFjBE,CAAhC,IJTE,EACkB,OMyBV,CAAZ,CAjBoD,CAmBpD,GN5BI,EAC0C;AaO9C,ADqBM,AJpBJ,AVIG,AEXL,AIQE,ALFF,AY4GE,AGzIJ,ED6BE,AdAA,EaqBM,EdhBK,EUJL,ARPA,AIQA,ESFE,EDqBM,ARnBJ,AO0GA,CE5GF,ADqBO,AbrBf,CSCY,ATDA,CKEC,CO0GX,CbvGoB,AMHpB,CQmBY,CJpBG,CIoB6B,Adf5C,ACNF,CDMG,CULD,ATDkC,ESCd,KTDtB,CDME,CCN8D,CDM5C,KAAlB,EAAoC,GAAA,GAAiB,IAArD,KAAmE;AeLnE,ADqBM,AJpBJ,AVKA,AEbG,AOAF,AD2BL,AHnBI,ACCF,ALNO,AYgHL,AG1IN,ERkDE,EN3BO,EY4BC,AL5BG,AJQP,CAAC,CCCC,CNIK,ACVF,COwBD,COpBC,AbPK,AWmHL,CCvFK,AL5BG,CK4BF,AJpBJ,ARRK,AM2BL,CEnBC,AVKI,ACVP,CQFP,CMMY,ANNX,CRE8B,CSKjB,AG2GZ,CbtGiB,ACVZ,GDUL,ASZF,CMMA,CfMwB,ASXvB,AHOmB,EEkBE,CMChB,ANDiB,AFlBA,CQmBK,IRnB5B,CGRA,CK2BM,CAA6B,ALzBlC,CDwBQ,CAAwB,GAAxB,CAA4B,CMC/B,AL3BN,EK2B4C,ANDnC,CEnBC,AFmBZ,CEnBqC,CDLE,EKyB/B,IJpBI,EAAkC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAlC,EAAiD,OAAjD,CAAD,CAAP;AKAH,ADqBM,AJpBJ,AVKG,AEdW,AOIb,AJKD,AJFD,AY6GI,AG3IR,MduBmB,AOIT,GRGD,CDOK,ASVA,CTUC,ESVE,CTUC,CasGH,CZ7GX,EQHkB,CTUE,ASVD,ARGJ,CDOM,AasGL,EJhHH,CAAU,EIgHF,CZ7GrB,GY6GI,EbtGA,CSVS,CAAX;ATWE,AEfU,AM4BhB,AFjBE,ALFA,AehCJ,IhBsCQ,CEfA,CM4BF,GFjBG,CLFC,GDMO,AMJJ,CNIK,AQaJ,AFjBA,GAAG,CAAb,CEiBe,CFjBC,CAAC,ELFE,CKEC,CNIhB,AMJJ,CNI0B,ACNI,CKEP,CEiBzB,AFjB0B,ALFxB,EOmB0B,AFjB1B,CNII,CMJwB;ASlCV,AD8CT,AJbT,AVMI,AEhBqB,AOKvB,ADwBF,AHnBA,ACEE,ALFF,AY2GE,GC9FA,CdPE,AEhBqB,EOKnB,GTWG,AKNJ,CKAC,ADLI,ARKJ,CY2GC,CbrGK,AMJJ,CNIJ,AMJK,EGPM,AJKJ,AJAA,CKEC,COyGV,CZ3GoB,CSAP,ALAf,CJAA,CKEiB,ALN6C,CSI5C,ATClB,CIDmB,CILjB,ECKoB,ADLI,EJKF,ACEZ,CAAa,CAAb,CAAV,CAD0B,CAE1B,EDHF,EAAiC,cKAf,CAAuB,OAAvB,EAAgC,IAAhC,EAAsC,OAAtC,CAAlB;AKCJ,ADoBK,AJpBD,AVMG,AEjBC,AOMA,AGhCR,AJwDI,AHnBE,ACGA,AOwGE,AG5IR,CF0CA,GNUI,EN9BkC,IGW5B,CKAC,CFmBC,EN9BV,AGWY,CGmBC,AKwFA,ILxFI,AHnBA,CKAC,AG2GA,CH3GC,IG2GI,CH3GrB,ADLgB,EJKd,CQ2GS,CR3Ge,EQ2GE,GJhHxB,CIgHO,CJhHgB,ADwBhB,CAAa,CKwFW,KLxFxB,CKwF8B,CJhHL,ADwBJ,AKwFU,CJhHL,IIgHI,CLxFH,AKwFlC,CLxFmC,ICxBnC,cDwB4B,EAArB,CAAX,CAF0B,CAG1B;AMEJ,AJrBG,AVME,AEjBH,AOMM,AJKA,ACGF,ALHF,CDDG,GSJC,IPNA,AGWA,CILK,CAAC,ARKJ,EIAE,CILJ,AJKK,CHXC,AOMI,ERKF,CCVV,EGUE,AJAW,IQLX,EPLM,AOKe,CPLd,CDUY,CAAC,CQLK,GAAG,IAAI,MPLlC,CAA0B,CDUb,CACX,KCXF,COK8B,CPLK,AOKO,ARMjC,CAAC,KQNgC,CAAA,CRK7B,EAEX,GQPwC,CAAA,EPL1C,EAAqD,IAArD,EAA2D,KAA3D,CADJ;AQYA,ARVA,AKCI,AEIyB,ADwB3B,AHnBG,ACGD,ALFM,AYyGN,AG7IN,IRsDI,EN7BE,AKCO,AEIkB,KI+GpB,IXpHI,EM6BE,AKuFX,CXpHY,AM6BA,GCxB4B,EAAf,CFJzB,CAAyB,EC4B3B,CAAwB,GAAxB,CAA4B,GAA5B,EAAiC,QAAjC,GN7B4C,CAAC,KAAD,CAA9C;AACA,AKOA,AEJ8C,AD0B7C,AHnBE,ACGC,ALLa,AY4Gb,AG9IN,ETiCE,CCJoD,CA4BpD,CC5B8C,CPH1C,ADWE,CQN0B,GPLxB,ADQS,CY4GR,CZxGH,CCZK,AKOX,CAAY,AEJkC,CAAZ,CAA5B,AIiHF,CZ5Ga,CCRD,ADQd,CCRe,ADE+C,CAW9D,CMNF,EAA8B,IAA9B,CLPgB,CAAhB,AKO4C,OAA5C,EAA0E;ALN1E,AKIA,AEEM,AJIL,ACGG,ALAF,AYuGI,AG/IR,IPiCQ,EPNF,EOMM,CFFV,AEEW,KFFX,CLJa,AWoHA,ENhHL,CLJQ,CAAC,AOMX,AI8GW,CXpHjB,AOMsB,AI8GJ,CNhHlB,IMgHa,CAAW,GJ9GlB,EI8GO,CAAP;AXnHN,AKME,AEAG,AHOD,ALAF,AY+FA,AGxIJ,Md4BM,GKMG,OAAL,CLNa,EKME,CLNC,CAAlB,KKME;ALLF,AKME,ACuBF,AHnBA,ACGI,AU1CN,ER0DE,AHnBA,MHVM,AGUA,CEJC,EFID,EEJJ,ECuBW,CDvBC,ACuBA,IDvBZ,QCuBF,CAA2B,EN7BE,CM6B7B,CAA+B,CN7BC,EAAhC,GM6BqC,CAAC,OAAtC,EAA+C,QAA/C;AN5BA,AKME,AEDE,ADwBJ,AHnBE,ACGE,ALDF,AYuGA,AGjJJ,EPmCM,IPLA,AOKI,CAAC,CROH,CMNC,ACuBA,EKsFE,IJ9GL,CFCF,AEDgB,AI8GhB,CLtFF,EDvBiB,ENME,CQPf,EROkB,CCZC,ADYrB,CMNA,ELNmC,IAArC;AQSA,AHFE,AEDE,AGhCN,AJwDC,AHnBG,ACGE,ALDF,AYuGD,AGlJH,ENuCE,ADHI,IAAI,CAAC,CROH,CMNC,IEDH,AROO,CMNT,ENMY,CMNC,ANMA,CAAb,CMNA,GGEkB,CAAC,OAAD,EAAuB;AACzC,APSG,ADlBL,AOMG,AJKD,ACGE,ALDF,Ae5CJ,CPsBO,KN2BM,EFLL,CCbC,EQSE,IAAI,APSO,ADlBP,CAAC,CDaC,CEKqC,CAA7B,CFLL,CAAhB,EEMC,CAAC,ADnBG,EAAP,CCmBO,CDnBmB,EQSjB,CAAa,APUnB,KAAuB,EOVjB,CAAP;AACD,APUG,ADnBF,AKMA,ACuCG,AHlCH,ACGE,ALDF,AY2EuD,AGxH3D,CHwHO,GXxFH,EM6CS,EL1BD,CAAC,AIbJ,CNOC,EEMM,CAAC,ADnBJ,AKMA,CJaK,AIbJ,GJaO,AIbJ,CAAb,EAAgB,ACuCO,CL1BV,AIbI,CJaf,CK0BwB,CDvCN,GCuCU,GAAJ,CDvCC,CAAC,ACuCzB,MDvCiB,GAAiB,CAArC,EAAwC,CAAC,EAAzC,EAA6C;AQE1C,AZYD,ADnBF,AKMG,AFKH,ACGE,ALFK,AY6GX,AG1JA,EboDM,IYZO,AdKF,ICZD,CKME,CJaI,CAAC,AFPP,CCZI,CaOQ,CZYhB,AIbC,CJac,ADnBJ,AKMqB,CQCZ,AZYpB,AIbC,EJaiB,EIbmB,CQClB,AbPF,CCmBjB,ADnBkB,GaOoB,ARDI,QLN5C,CAFwB,CAGxB,CKKuC,EAApC;AQEL,ALjCmC,AP6C/B,AIbD,AKrBL,AP0BI,ACGE,ALHc,MAAA,GcJX,AZYI,CAAP,EFRoB,CcJb,CdIe,QcJnB,CAAc,MAAM,CAAC,KAAD,CAApB,EAA6B,iBAA7B,CAAP;AACD,AZYI,ADnBD,AKMD,AKrBH,AP0BI,ACGE,ALJuB,Ae5C7B,CDuCO,AZSA,KS7BD,EVeE,ADUqB,ICVjB,CAAC,YUfY,GVejB,AUfoB,CAAC,IVeI,AUfL,EAAe,SAAf,KACxB,GVcA,AUdG,EVc+C,EUd3C,KAAK,SAAS,EADzB;AVgBM,AKOJ,AFIE,ACGE,ALLsB,MCTtB,mBAAmB,GAAG,IAAtB;AQQC,ARPF,AUdL,APyBI,ACGE,ALNI,Ae3CV,IJqBI,CVQwB,CQaf,ARNT,EDOoC,MAApC,eWtByB,CFqBQ,EErBL,CFqBQ,GErBxC,CFqB4C,wBAAJ,EAAjC;ALKH;AULJ,ADyBO,AXbA,AS/BP,APyBI,ACEE,ALNF,Ae3CJ,IJsBI,EGmBE,ADyBO,AXbA,KS/BF,AXqBA,CKMC,KHIY,AS/BP,CAAC,CE4CQ,CXbE,AFVR,CEUO,CWaG,CCzBP,ATQA,ALNA,EEUqC,CYZjC,AHnBvB,AN2BsB,CAAC,CAAC,CQiBC,AbvBzB,EcFsB,AHnBK,AXqBA,EawB1B,EC1BiD,ITQ5B,CAAc,EM3BxC,EAA4C,EN2BlB,CAApB,CAnB0B,CAoB1B,CQiBF,IACK,OAAO,iBAAP,KAA6B,UAA9B,GACJ,mBAAmB,CAAC,OAAD,EAAU,iBAAV,CADf,GAEJ,qBAAqB,CAAC,OAAD,EAAU,iBAAV,CAJlB;ACxBL,AZYA,ADlBE,AUbF,APyBE,ACGE,ALPA,AY+GC,AG3JP,EJuBE,IGmBI,AFiHO,EXvHL,CCkBC,EYZE,CdEC,EY+GS,EVrGL,AFVA,CEUP,AUqG2B,CAAC,CZ/GlB,ECRE,CCkBC,ADlBA,CaMC,AFiHa,EXvH5B,ADQiB,AY+G4B,CXvH3B,ADQA,CWrBC,CCoIS,EXvH5B,AUbsB,CVa1B,CaMF,AZYO,CDlBwB,AWuH6C,CEjH5C,AdEf,CWrBjB,CT+BkC,AFV9B,UEUwC,CAAC,GAAX,CAAe,CAAf,CAAlC;AYXE,AZYH,ADlBK,AKMM,AKnBX,APyBG,ACGE,AOwGJ,AG5JF,CbqDO,AS/BP,CLqBY,ILNN,CUbC,IGmBI,AHnBA,ELmBY,GQAP,ARAO,CQAN,CHnBC,MGmBd,AHnBoB,CAAC,IVaI,CAAC,GUbZ,CVaZ,AUb4B,CVaC,IAA7B,EAD2B,CAE3B,UUdK,KAA8C,WAAlD,EAA+D;AGoBnE,ARAC,AKnBF,APyBE,AJLE,AYgHJ,AG7JF,EJyBE,CGiBA,MAEO,AHnBA,ACoIA,CDpIC,AXoBA,CMDC,CMiHC,CEjHC,CHnBX,AXoBY,CMDC,AKlBT,ECmIW,EZhHE,CcDC,EFiHX,CZhHH,EcDO,AdCY,EYgHE,CNjHhB,CAAkB,CQAC,AFiHA,GNjHnB,CAAP,CMiH+B,GEjH1B,AFiHkB,EEjHa,EFiHE,KAAK,KAAK,KDnI9C,ACmIG,CAAP,EDlII,qEADA,GAEA,gCAHJ;AGoBE,AD2BJ,AZjCM,AKMH,AKhBD,APsBE,ACEE,ALPE,AYgHP,AG9JD,CH2JO,CD9HL,GKlCE,CH6EE,ARnBA,IJdI,CaMC,KAAP,MD2BkB,ARnBA,GQoBlB,ARpBqB,CQoBpB,ARpBqB,CMxBC,EVUE,CUVC,GE4C1B,CZlC8B,CYkCC,AF5CjC,ENwBmC,CJd/B,EAAkC,AIcA,CAAC,CQoBrC,ARpBsB,IAAoB,CQoBc,eRpBnC,KACf,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,WAAW,GAAG,CAA/B,MAAsC,CAAC,CAD3C,CAvB0B,CAyB1B;ASTH,AD4BG,AZlCE,AUVP,APsBG,ACIE,ALTE,AgBEL,ADjDH,GD4CS,KbJD,CaMC,kBbNkB,GAAG,IAAtB;AaOJ,AD4BE,AZlCC,AKMK,AKfZ,APqBI,ACIE,ALTE,AehDR,ET+CY,QQAF,CRAW,GQAP,ARAO,KQAX,CACF,mEACI,KAAK;AD2BX,AZlCD,AKMD,AFMA,AJLI,AY+GR,AI7GEC,ADnDF,ECmDEA,GfvB0B,CAexB,AWqHE,INhHI,KUGK,CAACC,CVHC,AUGF,EAAG,CVHE,KAAK,OAArB,AMgH4B,GAAwB,YEjH9C,CAAN;AAID,AD0BG,AP5BF,AFMA,ACGE,ALRE,AY+GN,AI7GE,ADpDJ,EHiKE,ICpFQ,Eb3BF,AgBEAC,EVHE,CAAC,AMgHA,CPvGC,CQmBK,ADoFJ,CCpFK,AP5BJ,ANCA,CAAC,AgBEA,EJ4GyC,CCnF9C,AGzBQ,GVHG,CAAC,AUGAC,CHyBK,GRnBD,ALRlB,EMDM,CDSe,ALRA,Ea2BnB,AP5BqB,CAA3B,CUGc,ChBFgB,AgBEA,CHyBK,Ab3BJ,GAAN,EAArB,Ea2BsC,CAAC,QGzB7B,EHyBR,AGzB2C,IH0B3C,EAAE,GRpBwC,IAAvB,CAA4B,CAA5B,CAAvB,CQoBiB,OAAO,CAAC,UAArB,CADJ,EACsC;AC1B3C,AD2BO,AP7BJ,AFMA,AJLI,AY+GN,AI7GIC,ADrDN,CDyCA,CFyHE,IAAI,AI7GAA,EVHE,AMgHA,GCnFA,CP7BI,AUGA,EJ2G4C,AI3G1C,CVHC,EO6BP,AP7BJ,CO6BI,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,OADL,CAAA,EACY;AC1BpB,AD2BU,AZrCN,AGaA,ACEE,ALPC,AY+GL,AI7GMC,EJ6GN,IClFQ,EZrCF,AeUAA,EXKE,COwGC,EAAE,CClFK,CAAC,GG3BD,EH2BA,AG3BE,EH2B4B,ERtBxB,CWLCZ,EfVE,EIeE,AOqG2B,GXpHxB,AeUZ,CXKd,AWL2Ba,EXKE,CJf/B,EAAkC;AYsC1B,AZrCN,AKOF,AFMA,ACEI,AOwGN,AI/GY,AD1Ed,EHyLE,IXvHI,CeO+C,CH8BzC,CP9BH,AMgHA,EAAE,EClFM,AP9BJ,CO8BK,AP9BJ,EM4G0C,CXnHvC,AKOA,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CO8Bf,AP9BgB,CO8BK,CP9B7B,EAA4B,IO8BQ,CAAC,GAA7B,EAAkC,OAAlC;AACD,AZrCN,AKOC,AKjBN,APuBI,ACEI,ALRF,AYgHJ,AI7GIC,EJ6GJ,INhHI,AKjBA,AXiBA,AgBGAA,IVHI,CNAC,CYgHC,CI7GC,CVHC,AMgHA,CI7GC,IAJsC,EVChC,CAAC,CAAD,CAAf,EKjBoB,GAAI,SAAD,IACxB,MAAD,IAA2B;ALiBzB,AKhBA,APsBF,ACEI,AOkGgD,AIvGlDC,CJuGN,KIvGMA,ELnBM,ILgBA,EUGE,EVHE,AKhBI,AKmBJ,GVHG,AKhBI,KLgBC,KAAL,CAAW,CAAX,CAAb,MKhBoC,CAAC,MAAM,CAAC,IAAR,EAAc,SAAd,CAApC;AE0Cc,AZjChB,AGcA,ACEI,ALRF,AYiHN,AIpHqD,KH2B7C,AG3BU,CH2BV,ADyFF,AIpHF,IhBGM,CCRC,GDQG,CCRC,ADQA,KCRK,GDQV,AYiHa,GAAG,CAA1B,CZjH4B,CCRjB,IAAsB,IAAI,CAAC,KAAL,KAAe,SAA5C,EAAuD;AYsCpD,AZrCD,AKOA,AKhBA,APuBF,ACEI,ALTsB,AYkH9B,AI/GI,GHmBE,GFtCI,ACkIJ,GCpFO,AG3BJC,CVHC,IAAI,KAAK,AKhBI,GAAG,AKmBtB,CAAmBP,KVHjB,AMkHsB,ENlHE,AUG1B,CJ+G2B,KAAK,CAApC,iBDlIyC,GAAf,CAAmB,QAAnB,CAApB;AE+CE,AZrCF,AKOE,AFOJ,ACEI,ALVF,AYmHN,AI/GG,MJ+GG,EPzGE,ALV+C,IKU3C,ECTE,CAAC,CDSC,CAAC,CCTC,GDSG,CCTC,CAAC,KAAf,SDS6B,COyGC,EPzGE,COyGC,KAAK,CAA9C,MPzGqC,GAAmB,oBAAvC,CAAT;AQsBA,AZrCF,AUVA,APwBF,ACEG,ALVC,AYmHR,MXzHM,AUVI,ACmIJ,CPhHA,GJTI,CAAC,EIgBE,CLVA,ECNP,EDMuB,CCNV,AUVI,AXgBO,KWhBF,QXgBf,CWhBP,CXgBE,CWhB+B,CXgBQ,CYmHV,CXzHC,EWyHE,GXzHG,EWyHE,CAA7C,CXzHmB,GAA+B,CAAC,CAAhC,GAAoC,IAAI,CAAC,KAAL,GAAa,WAA9D,CAHqD,CAIrD;AaSC,AD4BC,AP/BA,AKhBA,APwBJ,ACEI,ALVE,AYuHV,AInHEQ,EAAAA,ELpBM,EGmBK,EECL,CFDQ,EECN,CFAN,ARJQ,CQIP,IHpBgB,CXgBL,EcIZ,AHpBoB,EGoBY,CRJb,CAAC,CQIe,ARJhB,CAAX,ENAc,EMAI,CQI1B,ARJ2B,ANAD,IAAgB,CcIyB,AdJxB,KMAN,CAAC,CAAD,CAAjC,EAAsC,ANApC;AcKJ,AD2BE,AZrCF,AKMI,AKhBA,APwBN,ACEI,ALVE,AgBIN,MfVE,AUVI,EGoBE,ERJF,CO+BK,AG3BJ,GVJG,CQIK,AbVJ,GaUO,AbVJ,AKMA,AKhBI,AXgBN,EWhBQ,IGoBI,AHpBA,CGoBC,ARJJ,CAAP,KQII,ARJS,AKhBP,CGqBd,AEDM,CFCL,AHtBa,GGsBd,EAAM,CAAN,ARLQ,EQKC,CRLuB,CAAxB,CQKR,ERLoC,ELNE,CaWrB,AbXsB,GaWnB,ARLsB,CAAC,CLNL,AKMI,CQKnB,ARLvB,CLN8C,SAAR,CAA1C,MaW4C,CAAC,CAAD,CAAvB,GAA6B,OAAO,CAAC,GAAG,GAAG,CAAP,CADzC,EAEZ,OAAO,CAAC,CAAD,CAFK,CAAhB;AAGA,ADyBI,AZrCJ,AKMG,AKhBC,APwBN,ACEI,ALXS,MagCP,AZrCJ,AUVI,GGsBG,ARRL,COiCM,AZrCJ,EYqCM,CCzBC,AbZJ,CDKI,CMCF,AKhBI,EAAE,CVUH,CYoCH,AZpCI,EUVM,CGsBZ,CAAc,CHtBN,IVUH,CAAZ,CaYO,EAAuB,iBAAvB,CAAP;AACD,ADyBK,AZrCL,AKMK,AKnBc,AP2BpB,ACEI,ALZQ,CcET,IHnBC,CEkDE,ERrBF,CQqBK,EAAE,CRrBH,GCVG,CDUC,ALZW,CaiCN,ARrBJ,CAAC,CQmBH,EP7BM,CAAX,EDUM,CAAS,CCVC,ADUV,ALZN,CMEA,ANJqC,CKcnB,ALXlB,CMCmB,aDUa,CAAC,KAA3B,IAAoC,cAAc,CAAC,CAAD,CAAlD,GACJ,cAAc,CAAC,CAAD,CADV,GACgB,8BADhB,GACuC,cAAc,CAAC,CAAD,CADrD,GAEJ,gBAFJ;AQsBE,AZrCP,AKMS,AFQR,ACIG,ALbG,MagCA,MP/BE,GO+BO,CP/BH,CO+BK,GP/BD,EO4BL,KP5BY,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,MAAM,CAAC,CAAD,CAA1C,kBUI+D,KAAKV,aAAc;AH4BpF,AP/BC,AKjBH,APyBJ,ACIC,ALbK,MagCA,UAAU,EAAE,EAJP,gBF5CQ,GAAf,CAAmB,QAAnB,EAA6B,aAA7B;AVWN,AKOO,AKjBF,APyBH,AJTM,AetDV,EdgDE,uBAAuB,CAAC,OAAxB,CAAiC,CAAD,IAAO,CAAC,CAAC,UAAF,CAAc,WAAd,CAA0B,CAA1B,CAAvC;AYsCQ,AZrCT,AKOM,AFQH,ACGA,ALZM,AYuHV,AG7KA,IVkEI,EO2GE,EP3GE,IAAI,GO2GG,EP3GE,CO2GC,MP3GN,CAAa,CAAb,CAAR,EO2GJ,6CIlH0E,KAAKA,aAAc;AH2BnF,AP9BL,AKjBC,APyBF,ACGA,AO4GJ,AG9KA,MJsCU,KN4BC,GM5BO,CN4Bd,EM5BiB,aAAa,CAAC,YAAd,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,CAAf;AEgDI,AZrCV,AGgBI,ACED,ALbO,AerDV,CAAC,KdgDK,CchDC,CAAC,EXgEE,MHhBM,ADKF,EIWI,CHhBE,EGgBC,AJXF,ECLA,CDKG,CAAZ,ECLwB,CchD3B,CAAN,KAAiC,MAAM,CXiEhC,AWjEiC,KXiE5B,QAAL,CAAc,MWjEkB,CXiEhC,AWjE0B,CXiEJ,EWjEmC,EAAhE,CAAD,EXiEQ,AWhEH,CXgEiC,GWjEtC,CACU,KXgEF,CAAwC,CWjEhD,GXiEQ,CADa,GAEb,QAAQ,CAAC,UAAT,CAAoB,KAAK,QAAL,CAAc,OAAd,CAAsB,OAA1C,EAAmD,IAAnD,CAFJ;ASsBM,AZrCR,AKOE,AKlBE,AP8BF,AW/DJ,ITmDI,ELPE,AUXI,ELkBF,EFYE,CHnBC,CKOC,ELPG,AUXG,CP8BH,GHnBI,AGmBO,CHnBN,AKOD,AKlBI,CLkBH,AFYhB,CEZe,CAAf,KLPW,CUXT,EAA4B,EVWD;AYsCvB,AZtC0B,AKQhC,AKlBI,AP8BJ,ACDF,ALdQ,EKcR,QDCQ,CEZC,AKlBI,ILkBX,AFYW,EJfA,CIeG,CO9BV,CN6BY,CLdD,CAAC,CIeG,ACDH,ELdG,CAAb,EAAgB,CAAC,EIeT,CAAc,AJfF,KIe1B,CA5CI,AJ6BE,CIgBN,CJhBkC,CAAC,EAA7B,EAAiC;AakCjC,AZvCI,AKSX,AKlBI,AN6BH,ALdQ,ICN6D,CAA3D,GAA+D,CAA3E,CIoBQ,QAAQ,ALdF,GKcK,KLdG,CAAC,EKcI,CAAC,OLdK,CAAC,CAAD,CAAV,CAAc,EKclB,CAAuB,CLdpB,EAAqB,OKcxB,CAAjB,AWPmD,KAAKP,OhBPpC,AgBO+B,ChBP3C,AgBOwDkB,EhBPA,EgBOK;AH2B/D,AZvCR,AGqBE,ACDA,ALdU,IKcV,IJpBI,EGqBE,ECDE,CAAC,CJpBC,EGqBE,AJfF,CCNG,EGqBE,EJfA,CKcf,GJpBqB,AIoBA,CJpBC,CGqBC,CAAC,ECDE,OAAL,EAArB,GJpBa,CAA0B,CGqBxB,CACX,EHtBS,EAAgC,IGqB9B,EAEX,UHvBS,EAAkD,IAAlD,EAAwD,KAAxD,CAAf;AYwCQ,AP9BR,AKlBI,AP+BM,ACFR,ALdS,AYyHP,ENtHJ,IMsHoB,ENtHd,AKlBI,GLkBJ,AKlBO,AN6BJ,GM7BO,KN6Bd,CM7BoB,CAAC,ACwInB,ODxIY,CAAe,CCwIa,GDxI5B,CAAoB,OCwIhC,CAAmD,QDxIvC,CAAZ,uBKsBoE,KAAKX,aAAc;AH2BnF,AZxCR,AKUE,AKlBE,AP4Ba,ACChB,ALdQ,AYgaT,AGjdF,EJkCM,AC+aJ,IRhZM,AWjEF,EToDE,CLVC,CURK,AP4BK,EAIX,CEdK,AKlBI,AC+af,EXvaa,CAAC,AWuad,CRnZiB,CEVf,AFUA,EEVgB,ILVX,EAAP,AUR4B,AIlCJ,CJkCK,CVQH,Cc1CC,EAA7B,KJkCiB,CAAwB,GAAxB,CAA4B,GAA5B,CAAX;AEiDI,AZxCN,AKUE,AFcF,AQ+YA,IXvaA,EYwCM,EThBF,CHxBC,EKUE,KAAL,CO8Be,AThBJ,EEdE,CO8BE,AThBD,CAAhB,GEdE;AO+BM,AZxCT,AKUG,AKnBA,APiCF,ACjFuB,AL+DjB,AY2YA,AG3bJ,MJiCI,AIjCG,EXkEL,CQyXE,ENvYC,CO8BK,EFjDE,EIjCZ,CXkEW,CEdX,CO8BiB,AP9BJ,AKnBI,AXeN,CIkBG,CAAhB,AQyXM,GZ3YY,AY2YgB,CAA5B,AG3bsB,CFkFF,CAAC,CFjDzB,CXeqB,CWfO,AXexB,CMIJ,CAA0B,ANJF,KMIO,CO8BrB,GP9BV,EO8ByC,AP9BJ,KAAK,KO8BpC,EAA+C,EP9BhB,ASpDrC,CAAyC,CToDzC;AO+BQ,AP9BT,AKnBG,APiCJ,ACHJ,ALfY,AY2YF,AG/ZR,KCWE,GZ2BI,CQyXE,CD1ZI,EPiCV,GSgBe,EFjDE,GAAG,EEiDE,CAAC,GAAb,AFjDgB,CAAC,CC0ZrB,ECzWkC,CDyWc,MCzWP,CAAC,EDyW1C,CAmBR,CAlBA,GD3ZsB,EAAhB,EEiDoC,CAAoB,IAApB,CAAyB,IAAzB,CAA9B;AACD,AZzCX,AKWC,AFcC,AJlBQ,AY4YV,AIpYC,QZUK,CHzBC,GGyBG,EHzBV,CGyBa,MAAM,CAAC,QAAP,EAAX,CAtDI,CAuDJ;ASgBO,AZzCV,AUTO,AXgBI,CCdZ,MY8Be,CFhCH,YXgBM,aWhBV,AXgBuB,EWhBQ,CXgBL,OAAO,CAAC,SAAD,CAA7B,CAHkB,CAIlB;AMnDmB,AKmCrB,APkCN,AQyXM,AIve2B,ML4E3B,GC2ZA,ERzXC,COlCK,CAAC,OPkCG,COlCV,CAAiB,CPkCJ,AQyXb,GACJ,ER1XsB,CAAC,CQ0XnB,KR1XN,EAAiC,AQ0X/B,CAAa,ED5ZT,CAAoC,AC4Z5B,IAAS,GD5ZjB,EAA6C,AC4ZvB,SD5ZtB,cC4ZiB,GAA+B,GAApD,CADI;ACzWA,AZxCV,AKWA,AKpBS,APkCH,AJlBM,AY8YV,MC7WQ,AZxCJ,AGyBA,IAAI,GAAG,CSeK,CAAC,GTfD,CAAC,CSeD,AbjCA,EaiC8B,EbjC1B,GAAG,CIkBP,CAAZ,OHzB8B,GAChC,CAAC,KAAD,EAAwB,EDMmB,CAAC,IAAvB,CAA4B,ECNf,GAAG,CAAC,CAAtC,KAA2C,CDMtB,EAA4C,CAA5C,CAAb,CALkB,CAMlB;AaiCA,AZvCN,ADOM,AgBMZY,OfbW,CYuCC,GZvCG,CAAC,CYuCC,CAAC,AG1BJ,CfbK,AeaJC,MAAf,CAAsB,GfbO,GYuCjB,AZvCoB,CYuCC,AZvC3B,EAA6B,CAAC,GAAG,CYuCC,CAAC,GAA7B,AZvCgC,CAAC,CYuCC,KZvCxC,EYuCM,AZvCyC,CAAC,AeatD,EfbM,Aea8CzB,EfbM,Sea1D;AH2BW,AZvCH,AUXA,APkCF,AJhBM,AerBV,IJGM,KIHC,CdcK,AGuBJ,CAAC,COlCK,EVWE,CUXC,EVWE,CcdnB,CJGqB,EIHL,CdcQ,CAAC,CAAD,CAAlB,YUXW,CAAa,MAAb,EAAqB,CPkCR,IAArB,CAAL,COlCa,CAAX,APkC+B;AOjC/B,APkCA,AJhBI,AerBR,IJGI,OIHG,EXqCE,GWrCG,CJGK,CAAC,EPkCd,CAAa,CWrCjB,GXqCI,CAAkB,COlClB,CAAwB,GAAxB,CAA4B,GAA5B,APkCA,EOlCiC,QAAjC;AE4BO,AZjBP,AUVD,AXkBK,AerBT,KF8BK,GZjBI,oCAAqB,IAArB,CAAJ,EAAgC;AYwCjC,AZvCG,AGuBF,AQ6XE,AGhaR,QXmCM,CQ6XE,IXpZO,CAAP,GGuBO,UQ6XP,GAAqC,IAAI,GAAJ,EAArC;AC5WL,AZvCI,AUXH,APkCE,AJhBI,AY8YV,CCvZF,CFTM,aAAa,CAAC,IXkBF,QWlBZ,CAA2B,GAA3B,CAA+B,MAAM,AXkBN,CWlBO,EXmB5B,IAAI,CWnBd,AXmBe,EWnBgC,QAA/C,CXmBU,KAAqB,oBADzB;ACNL,AKOD,AKlBA,APkCC,ACLD,ALVM,MMDC,ADWA,CDDwB,CAQ/B,COpCO,QAAP,ELkBA,CAAoB,ANCR,GKUZ,SAAiC,ELVP,GACf,IAAgB,CAAC,IKS5B,CAA+C,OLTpC,CAA8B,mBAA9B,CADL;AagCZ,AP7BE,AKrBG,APoCC,ACPJ,ALTW,AevBH,CJ1BV,CLkDE,ADQA,IQqBI,GRrBG,AUhCQ,GVgCR,CCRP,CAAY,ANDD,IAAgB,CAAC,Ca8BV,GAChB,AP9BF,CO8BG,CP9BsC,ASxBjC,GAAuB,GFsD7B,EAA+B,Cb/BtB,CAAiC,Ga+B1C,EAA8C,IAA9C,KAAmE,Kb/B1D;AagCN,AZzCD,AKQJ,AFkBI,ACPF,ALTQ,AevBR,EFsDG,KAAK,CAAC,CZzCA,AKQX,CLRY,CAAR,AImBK,GCXT,GAAiB,EOiCZ,ARtBY,CQuBR,AbhCO,KKSO,CCXvB,CNEuB,GAAG,EKST,EQsBZ,ARtB2B,CQuBR,IADnB,EACyB,CRvB5B,ELTsC,CAAC,Ga+BpC,Eb/BqB,CAAqB,WAArB,CAAhB;AaiCP,AZ1CA,AKUD,AKpBJ,AN6BG,ALTS,AY2YF,AGlaN,CFmDJ,AZ/CA,KUDM,EIHE,CTuBC,AM2YC,IGlaG,KTuBT,CNAa,CWpBG,CLoBC,EKpBE,CAAC,AXoBZ,CAAW,EevBf,CAAoB,CfuBhB,CMAR,AKpBmB,AXoBK,AY2YlB,ED/ZsB,CCgad,IDhaK,CAAvB,IC+ZU,WGla2C,CAAC,SAAD,EAAY,IAAZ,CAA7C,CAAJ,EAAqE;AFyDzE,AZ1CA,AKSG,AKnBH,AXkB6B,AYgZzB,AGtaE,SHsaG,OZhZoB,GYgZzB,CZhZ6B,EAAE,WAAP;AIgBtB,ACLJ,ALX8C,AYiZ7C,AGtaE,EVgCH,GUpC+B,CAK7B,OXoCS,GJhBmC,IKW5B,CLXQ,CIgBN,CCLF,EDKK,IAAI,CAAC,KAAxB,EAA+B;AEbnC,AFcM,ACLJ,ALZmD,AYqIrD,AGxJE,ETsBF,MFcM,EEdE,ADSA,CCTC,KAAD,ANH6C,CIiBtC,CEdQ,ADSP,ELZU,CKYP,MAAM,kBAAN,EAAjB;ACRA,ADSA,ALbyD,AelBzD,QTsBI,EDSE,GCTG,GNJgD,CKa5C,CCTC,EDSE,GLbgD,EAAE,GKa1C,CAAC,GCTrB,IDSJ,CCT2B,CAAC,WAAW,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,KAAK,KAA7D,CAAJ,EAAyE;AACvE,AKpBN,APiCQ,ACJJ,ALdwB,AejBxB,MJEE,IN6BI,CCTC,CFaC,GJlBA,CMKN,AFaW,CAAC,EEbC,CDSC,GAAG,CCTjB,CADuE,AFcjE,CEZN,IFYyB,ACJD,CAAC,GM7BG,GAAI,GPiC9B,CCJJ,CDIuC,IOjCN,IAAsB;ALsBrD,AKrBJ,APiCQ,ACJN,ALdQ,AejBR,EJEF,EN6BE,MDIM,CCJC,CAAC,ELdA,CIkBG,COjCC,APiCA,COjCC,GPiCP,CAAW,ECJjB,ALdiB,CWfnB,AN6BsB,CM7BE,APiChB,EJlBe,EWfA,IAAS,CN6B9B,ALd4B,CAAC,MAAR,GAAiB,CAA9B;AMON,AKrBF,APiCM,ACJN,ALdO,AejBP,UJEM,APiCA,MAAM,CAAC,EOjCE,GAAG,MPiCZ,ACJQ,GDIc,IAA4B,ACJxD,CDIyD,CCJlC,MDIjB,ICJ2B,CAAC,MM7BD,GAAf,CAAmB,AN6BrC,mBM7BwD,CAAC,IAAD,EAAO,SAAP,CAAtC,CAAlB;AVUE,AGwBG,ACJL,ALdK,SCNO,EIoBL,QAAP,YJpBE,CACF,QADE,EACkB,IADlB,EAC8B,OAAA,GAAqB,IADnD,EACuD;AAC3D,AKUI,AKrBF,AN8BD,AOuHD,QX1IM,AUXA,ELqBE,CAAC,EMgIE,IDrJI,KAAK,SAAlB,ACqJF,EDrJ+B,CCqJF,KNhIR,KAAZ,CAAL,EAAyB;ALVtB,AKWD,AKrBF,APiCE,AJlBA,AYsIJ,AGxJA,IdaK,EUVH,IIHI,CdaM,CGuBJ,CHvBM,AKWL,AFYA,CJlBA,CWfE,CAAC,CPiCC,CJlBY,CAAC,CIkBV,AWpCA,ETwBZ,CAAe,ASxBA,EJGjB,CAAoB,APiCA,AJlBb,CIkBc,CEZnB,ASxBoB,GTwBG,ANNW,EWfpC,CAA6B,CLqB3B,AFYY,EAAR,AWpCW,EAAnB,EfkBI,CWf0B,CPiCS,AJlBW,GWfP,CPiCvC,EAAyC;AHvB9B,AKYZ,AKrBC,APiCE,ACjB2C,ALD3C,AYsIN,MX5Ie,GW4IV,GZtIC,EWfI,GXeC,AYsIX,CZtIY,IAAN,CAAW,IAAX;ACNQ,AKab,AKtBU,APkCL,AJlBA,AYsIN,AGzJA,KdYI,GcZA,EJGO,ACsJL,EZtIA,KWhBY,CXgBN,AenBE,CJGM,AXgBP,CYsIG,GAAa,AGzJV,EHyJnB,CAH2B,CAI3B,GZvIM,EenBN,CfmB4B,CenBE,GfmB0B,CAAC,OAAnD;ACPmB,AKc1B,AKvBsB,APmCf,AJlBD,AYuIL,AG1JE,IdWuB,OcXlB,CJEc,MIFnB,GAAe,EAAf;AdWE,AUTgB,APoCd,AJlBH,AenBF,KAFD,CdYkC,GD/BhC,EeqBK,GdUT,CAD2D,ADUhD,AenBE,CdWb,GDQe,CenBG,CAAC,EfmBA,CAAC,IenBP,CAAc,GfmBZ,KAAkB,EenBpB,CAAJ,EAA+B;AdYxC,AKcA,AKzBY,APqCJ,AJnB2B,AYuIjC,AGzJE,ETyBJ,MAAM,CMgIC,CRpHC,CEZF,CKzB6B,IPqCrB,CAAC,GOrCT,CADuC,CAEvC,GCwJJ,CAAuB,ERpHjB,GAAqB,EQoH3B,CAA+B,CAAC,CRpHA,AQoHD,CRpHE,CQoHE,CAAJ,CRpHJ,EAArB,EQoHkC;AN/HxC,AFYM,AJpBG,AYwIP,AGzJA,QfiBqD,EIoBjD,CEZC,CMgIC,ERpHE,EQoHE,CRpHC,EQoHE,IRpHI,CAAC,AQoHA,QRpHP,EAAP,KEZa,KAAK,KAAjB,AMgIQ,CNhIf,AMgI8C,CAA/B,CNhIiB,CMgIiB,CAAlC,CAAb;AX9IJ,AKeI,AKzBE,APqCC,AJpBD,AejBF,MdUA,MKeM,CLfC,CUVC,EXiBA,ECPI,EUVE,AXiBF,CMQG,CLff,CUViB,AXiBD,CMQE,ELfE,CUVC,AXiBQ,CAAC,CMQP,CKzBN,EAAf,AXiBA,CCPyB,CKe3B,ILfgC,SAApC,EAA+C;AAC7C,AKeE,AKzBE,APqCD,AQmHD,AGxJA,IdUF,GGEiC,COZ7B,APuCF,EQiHI,CX9IC,AKeA,CLfC,CUVC,CAAC,ACwJA,EN/HR,EKzBE,CLyBW,AKzBA,ACwJA,IX9If,CAAoB,EUVE,CAAC,CVUvB,AW8IE,EAAwB,GN/HxB,UKzBa,CAAyB,OAAzB,CAAX,EAA8C,OAA9C,CAAuD,CAAD,IAAe;AVWzE,AKeE,AKzBI,AXgBF,AYwIA,AGxJF,MTyBA,IKzBI,GCwJG,CZxID,CMSG,CAAC,AKzBA,CAAC,CXgBD,CAAC,CMSF,AKzBL,CLyBJ,AKzBe,CAAX,IXgBE,CAAa,MAAb,GYwIJ,CAA6B,CZxID,CAA5B,CYwIA,CZxI+B,AYwIE,IAAjC,EAAuC,CAAvC;AC/FF,AZ9CH,AKeE,AKzBI,AXgBC,AehBJ,SFwDU,AF1DR,QE0DF,CAAmB,AbxCT,MAAM,CawChB,EAAgD,AbxC7B,IAAI,CAAC,UAApB;AayCR,AFxDM,APqCF,AJrBI,AYuIF,AGvJF,QHuJE,ERlHE,EWrCE,EXqCE,CAAC,GJrBC,AYuIE,CRlHR,AQkHS,EGvJE,EHuJb,CRlHgB,AQkHA,AGtJd,Cfea,AefZ,Gfee,AYuIlB,ERlHF,CWpCI,CXoCsB,AJrBF,CAAC,AefI,GAAzB,EfegB,CAAW,EedvB,MAAM,CAAC,EfcK,CAAhB,EWhBsB,MIElB,CACI,CJHV,AIGW,EJHuB,CIGxB,EAAsB,CAAtB,EJHV,GIIc;AFqDpB,AZ/CA,AKeE,AKxBG,APqCC,AJrBE,AYuIH,AGnJW,MAAA,CJZZ,CViBE,AKeA,COgCC,CAAC,CEpDa,CAAC,CToBX,CLfC,AG4BA,GH3BR,CKcE,AFaU,AJrBF,CeZE,CAAc,CXiCX,AWjCH,EToBK,ELdT,AcNuB,CdMtB,AG2BW,CSmBjB,AbxCgB,EawCyB,CbxCtB,GawCnB,CEpDqC,CXiCzB,AWjC0B,CXiCX,AWjCU,CToB1C,ANR+B,CayCrB,AbzCsB,AeZc,CToBjB,ESpBa,CFqD5B,AZ/CZ,AcNY,CdMc,CDMJ,EeZ8B,CFqDnC,AbzCsB,CAAnC,CAH6B,AeTsB,CdMvD,ADOI,AeboD,EdMrB,CcNiB,CAAQ,CAAR,CFqD7C,ATpBQ,CAAoC,CWjCa,CFsDhE,EEtDY,CXiC4C,AWpChD,EAII,GAJJ,CdSR,AcXA,CXsCe,AW7CqB,CdkBiB,AG2BnD,AW/BF,GFoDc,CAAC,AZhDf,EAA2D,KYgD7C,AZhDd,CADJ,CYiD6B,iBAAX,EAAwC,IAAxC,CADP,GAEP,gBAAgB,CAAC,OAAD,EAAW,iBAAX,CAHpB;AAID,AZjDC,AKcI,AKxBD,APqCG,AJpBE,AYsIL,AGjJC,KH2IF,CXvIE,EG2BE,IAAI,CAAC,EH3BE,GAAG,UG2BV,CAAqB,IAAK,CAAC,cH3Ba,CAAC,AG2BzC,KH3BwC,CAA9C;AY4DF,AZ3DE,AKcG,AKxBF,GAbD,GVuBI,WAAW,GAAG,CAAlB;AACA,AUVD,APoCO,AJpBE,AYsIN,CDrKJ,KVyBM,KW4IK,ERlHE,IH1BI,ADMF,GCNK,AG0BZ,CH1Ba,AG0BA,AJpBF,AYsIf,CX5IF,ADMkB,GIoBZ,AJpBe,CIoBG,AJpBhB,EAAgB,CAAC,CIoBnB,EJpBsB,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AMQ1C,AFaG,AJpBK,AYsIT,AGlJG,OX4BA,EETG,GSnBG,CXgCC,EWhCE,GTmBX,ANPY,AeZE,CTmBC,KNPP,CMOR,ESnBuB,CAAC,UAAD,EAAa,IAAI,GAAJ,EAAb,CAArB;AdMJ,AKcC,AKvBH,APoCQ,AJpBI,AYuIV,AGnJI,MJJA,GVSG,GcLG,CXgCC,EH3BE,CAAC,EDOA,AeZE,CfYD,CWhBG,APoCZ,CAAa,AWhCa,CfYd,CWhBG,AIIjB,CdKG,CG2BD,CH3BN,AG2BwB,COpCC,CVSC,CG2BC,AJpBF,CWhBJ,AXgBK,CAAD,CWhB3B,AXgBY,EIoBsB,SAAL,CAAe,0BAAf,CACjB,IADiB,EACA,IAAI,CAAC,IADL,EACW,IAAI,CAAC,OADhB,EACyB,KAAK,OAD9B,CAArB;AH1BJ,AURJ,APoCO,AWjCD,IdKF,EcLE,GAAG,CAAC,KdKK,EcLT,CAAa,CAAD,IAAO,MAAM,CAAC,OAAP,CAAe,CAAf,CAAnB;AdMF,AKlBsB,ANwBd,AeXN,UdKI,CcLC,OfWK,AeXV,CfWW,CCNG,CcLC,EdKE,CDMD,EAAV,CeXN,CfWoB,CCNG,CAAC,WAA1B;AKeJ,AFaM,AJrBQ,AeXT,KApBM,CXoDL,KWhCK,IXgCI,CJrBD,MAAM,GAAG,YAAY,EAArB;ACNV,AG4BC,AJrBQ,AeXP,QdIE,GcJG,IfSC,GCLM,AcJZ,GfWa,AeXE,CAAC,CdIC,OAAnB,EAA4B,AcJX,CAAf;AdKA,ADOQ,AeXT,MdIC,WAAW,GAAG,EDOA,KAAK,GCPK,ADOF,CCPG,IAAD,CAAxB,gBDO4C,CAAC,IAAvB,CAA4B,CAA5B,CAAd;ACNR,AG4BF,AQkHF,AGlJC,MdIG,EG4BE,KH5BK,CAAC,UAAR,CAAoB,AG4BtB,EAAkB,UH5BhB,CAAiC,IAAjC,EAAuC,OAAvC;AY4DA,AZ3DD,AG4BC,AJtBQ,AeDZ,MXuBI,GS+BU,KT/BF,CAAC,KJtBG,IIsBZ,CS+BA,AT/BmB,AJtBF,CaqDU,IbrDL,GaqDtB,AT/BA,CJtBY,CaqDoD,GbrDlC,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,oBAAX,CAA9B,EAAgE;AasD5E,AT/BI,AJtBU,MIsBV,GS+BG,QAAQ,CAAC,AbrDF,CAAC,CIsBG,CAAC,CJtBD,CAAC,CAAC,IIsBhB,CAAuB,AJtBT,CAAQ,CAAR,EAAW,IIsBzB,CJtB8B,CAAC,KAAjB,IAA0B,KAAK,CAAC,CAAD,CAA/B,GACA,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,CAAf,EAAkB,CAAC,oBAAoB,CAAC,MAAxC,CADA,GACkD,KAAK,CAAC,CAAD,CAD3D;AaqDG,AZ3Df,AG6BC,AJrBU,AYqIL,IClFS,KDkFF,EX7IN,EY2DiB,EAAE,KAAZ,AZ3DE,KAAK,CAAC,CAAf,IAAoB,AW6IrB,GAA6B,EX7IH,CAAC,SAAD,CAAL,CAAiB,KAAjB,KAA2B,WAAtD,EAAmE;AY2DlC,AZ1D/B,AW6IF,ICnFiC,UAAU,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE;AAAxC,AZzDZ,AG4BF,AJrBU,AYsIV,GCpFa,CAAf,IDoFM,CAAC,CX7IC,CG4BC,GQiHG,EZtIA,GIqBV,EH5BiB,CDOD,ECPI,CAAlB,ADOiB,ECPI,CW6IlB,CACG,IZvImB,CAAC,cAAT,CAAwB,CAAxB,CAAT,GYuIuB,CAAC,kBAAD,EAAqB,IAArB,CAD5B,CAAL,EAC8D;ACpFjE,AZzDO,AG4BL,AJrBU,AYuIP,WAAK,IX9II,SAAS,GW8IlB,EX9IuB,CAAC,AW8IA,CX9ItB,EAAyB,CW8IC,GAAJ,EAAxB,CAD4D,CAE5D;ACpFN,AZ1DU,UAAA,KAAK,CAAC,SAAD,CAAL,CAAiB,KAAjB,IAA0B,WAA1B;AACA,AGvGmB,AJ6GjB,AYwIN,AG1IM,EAAA,QdJF,EW8IE,AG1IU,EfEV,CeFU,IdJH,CDMD,CAAC,CCNG,KW8IK,GACjB,GZzIE,CAAoB,EYyIhB,CAAC,GZzIL,EAA4B,IAA5B,KYyIF,CX/I0C,AW+IpB,CX/IqB,GW+I3C,EX/I0C,AW+Id,EX/IsB,SAAR,CAA1C,IW8IJ;AX7IG,AKYH,ANNM,AeFR,MTQS,ISRH,ITQJ,CAAe,INNJ,CeFb,IfEQ,CAAW,IAAX,CAAgB;AMa1B,AKzBF,AXY6B,AYyIvB,EN5HJ,IKzBI,ICqJI,GN5HR,CAAY,ENbe,IAAI,CMa/B,CNbiC,CMaC,EM4HX,EDrJE,CXYC,EWXxB,ACoJ0B,CDpJzB,QCoJC,CDpJF,CCoJqC,CDpJjB,WAApB,EAAmD,QAAnD,KAA0E;AVMtE,AKeN,AKpBI,AXUqC,AY0InC,AG3IH,EJTC,MCoJE,CNhIN,ASXQ,KTWR,EKpBkB,AXUuB,CMUxB,AKpBE,GAAf,AISD,CJToB,AXUuB,AeDJ,EfCM,AY0I3B,CAAC,CZ1I4B,CMUlD,IKpBI,CCoJE,CDrJsE,ACsJlE,CDpJN,ACoJO,CAAD,EAAyB,CAAzB,AG5IP,KH6IW,KAAK,gBAAL,CAAuB,GAAvB,CAA2B,CAA3B,EAA8B,CAA9B,CAFR;AX9ID,AKeG,AKnBJ,AXQsB,AY6IrB,SNlIG,MNXE,QMWF,GAA0B,SAA1B;AAGN,AKrBE,AXQK,AY6IN,AG9IA,STcI,ASd8C,IfpBhB,CAsB7B,EMYN,GAAe,ASdd,GACG,ITaJ,CSbS,gBAAL,EADH,CAHiB,CAKlB;AdLE,AKkBH,ANZO,AY4IP,AG5IC,MdNE,SAAS,GAAG,8BAA8B,CAAC,KAAD,EAAQ,SAAR,CAA1C;AACD,AKmBH,AKvBI,ACuJJ,AG7IE,QJVQ,eAAe,GACjB,CAAC,CAAC,QAAF,GAAa,QAAQ,CAAC,OAAtB,GAAgC,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CADpC,CALwE,CAOxE;AVGH,ASzGH;AT0GC,AUHK,AXOI,AeCN,QJRQ,AIQJ,MJRU,AIQJ,CAAC,CfDD,CWPO,MXOA,CAAC,CeCd,GJRwB,CAAC,AIQJ,IfDR,CAAP,AeCoB,KfDG,EAA3B,EAA+B,CeCZ,CJRR,CAA6B,OAA7B,CAAf,EIQkD,MAAM,CAAC,UAA3D,EAAuE;AJPrE,AXOM,AeCN,AL/GN,QCuGY,GIQD,GfDC,MAAM,CAAC,CeCb,WfDM,CAAoB,YAAY,EAAhC,EAAoC,IAApC;AWPC,AXQD,AeCP,IJTQ,UXQD,aAAa,CAAC,IAAd,CAAmB,IAAnB;AWRA,AXSD,AeCR,AL9GH,MCoGuB,MAAjB,CATwE,AXepE,CWLJ,KXQW;AACJ,AeEX,cfFW,IAAa,CAAC,IAAd,GAAqB,OAAO,CAAC,SAAD,CAA5B;AMcX,AKtBI,AXSK,AU7GX,EJ0HE,IKtBQ,MLsBE,AKtBI,CLsBH,AN1C0B,CA8B7B,GWVW,CAAf,EAAkB,ELsBZ,EAAgB;AACxB,AKtBI,SLsBC,SAAL,GAAiB,SAAS,CAAC,WAAV,CAAsB,6BAAtB,CAAjB;AACA,AKtBI,ADrGR,SJ2HS,OAAL,GAAe,SAAS,CAAC,WAAV,CAAsB,6BAAtB,CAAf;AACD,AKtBK,AXQE,YAAA,SAAS,IAAI,SAAb;AMgBR,AKvBM,AXQC,AU9GT;ACuGQ,AXQD,SAnCM,MAmCA,IAAI,IAAI,CAAC,QAAL,KAAkB;AWP3B,AXO6B,AU7GrC;ACuGQ,AXMK,QAAiD;AWLtD,AXMA,AeGI,ALhHZ,EKgHY,YfHC,IAAgB,AeGD,CfHE,EeGF,EfHf,KAA0B,MAA/B,EAAuC;AWLvC,AXME,AeGN,WAAO,KAAK,EfHA,MAAM,GAAG,CeGd,CAAkB,EfHA,CAAC,UAApB,CADqC,CAErC;AayDJ,AF/DE,AXOE,AeCoB,ALhH9B,MKgH8B,GFuDd,CEvDkB,EAAE,EFuD9B,CAAgB,QAAhB,EAAgC;AACpC,AF/DM,AXOE,AeAmB,IJPrB,CIOG,CAAP,GFwDK,CAAC,AF/DI,CAAC,QAAP,CAAiB,OE+DhB,EACC,YFhEF,CAAuC,eAAvC,EAAwD,SAAxD;AEiEE,AFhEF,AXOE,AeAP,AL9GH,EGuKU,IAFD,KAE4B;AACjC,AP3CF,AKrBK,AIQL,ETaA,QO2CQ,OP3CO,CAAC,EO2CE,CP3CH,EO2CM,AP3CI;AO4CrB,AP3CF,ANfM,AU9JV,MGwNM,GAAG,AP3CA,GO2CA,Ib1DK,EMeV,ENfc,CMeG,ANfF,GMef,YNfU,KAAyB,IAAzB,IAAiC,KAAK,KAAK,aAA/C,EAA8D;Aa2DhE,AP3CJ,AKtBE,AXOM,QWPA,CLsBH,KNfG,Ca0DG,CP3CX,GAAe,ANfF,Ca0DG,EP3CE,AKtBI,CLsBH,EKtBM,KEiEd,CAAgB,EFjEM,CLsBjC,AKtBkC,UEiEvB,CAA8B,EFjEhB,CAAuB,KEiErC,CAAP,CFjEqB,CAAvB,CAzBwE,CA0BxE;AEiEC,AP3CJ,AKrBG,AXMM,OauDW,ObvDX,MAAM,CAAC,YAAP,CAAoB,YAAY,EAAhC,EAAoC,IAApC;AMiBV,AKtBI,AXMK,AYgJT,SAAO,cAAP,CACI,IADJ,EAEI,OAAA,GAA+B,0BAFnC,EAE6D;ACxFzD,AF/DA,ACwJF,MCzFE,UAAU,EAAE,IAJK;AAKjB,AF/DA,AXKI,AYmJN,MCzFE,Mb1DI,Ma0DQ,EAAE,Kb1DG,GAAG,KAAhB;AaqDa,AbpDb,AYmJN,KC/FA,YbpDW,KAAL,CAAW,IAAX,CAAgB;Aa2DtB,AFhEE,AXKqB,AYoJvB,ODzJO,ECyJF,ECzFG,AFhEG,CAAC,EXKW,Ca2DX,AFhEG,CAAb,EAAgB,AXKS,CWLR,CEgEF,Ab3DY,EWLP,IXKA,EWLpB,CEgEK,CFhEuB,CAAC,ACyJ/B,CCxFI,CFjEF,EAAiC,QEiEpB,CAAC,UAAD,EAAa,iBAAb,EAA0C,IAA1C,CADR,GAEH,aAAa,CAAC,UAAD,EAAa,iBAAb,CAFjB;AAGD,AFlEK,AXIiC,GaiDvC,OFrDY,IXI2B,CWJtB,GAAG,MAAM,CAAC,CAAD,CAApB;AEmEP,AFlEO,AXGkB,AYqJtB,ECpFJ,EFpEQ,KAAK,ACwJJ,CDxJK,GXGJ,EAXqC,CAYrC,IWJF,CAAkB,ICwJtB,CAAuB,GAAvB,CAA2B,EDxJvB,CAA8B,CCwJlC,EAAiC,EDxJ7B,KCwJJ,EAL2D,CAM3D;ACpFJ,AP/CE,AKrBM,AXIE,AYqJN,AGlJQ,ETcV,ASdU,EJPJ,SIOe,GTcP,ASdO,CTcN,CKrBK,CAAC,ELqBP,EAAe,OKrBvB,IAA+B,KAAK,CAAC,WAArC;AEqER,AP/CI,AKrBG,ACyJH,AGlJA,GJ1C0E,CLwD1E,AKpBE,ILoBE,CAAC,CSdC,MAAM,CTcZ,CAAc,CSdE,ITcG,CSdE,QTcP,GAAiB,ASdf,CAAuC,OAAvD,qBTcA;AOgDJ,AbjEU,AYsJN,gBZtJU,IAAI,CAAC,WAAL,KAAqB,IAAzB,EAA+B;AakEzC,APhDI,ANjBS,AYsJT,AGnJA,ITcA,IAAI,ASdA,CTcC,KNjBI,AeGC,CAAC,ETcX,CAAc,ANjBW,CAAC,EeGtB,ETce,ANjBV,GAAwB,AeGX,CAAtB,CfHS,CeGgB,CTcX,GAAe,6BAA7B;AACD,AKrBG,AXIK,AeGL,AL7JN,ECsJM,WXEI,MAEO,WWJiB,CAAC,SAAD,CAA5B,CArCwE,CAsCxE;AEoEN,AP9CE,AKrBI,AXGM,AeGP,KAJkB,CAKnB,QfJQ,aAAa,CAAC,IAAd,CAAmB,IAAnB;AACA,AYoJR,AGhJA,QHgJI,MZpJI,CYoJG,CAAC,GZpJC,OYoJT,IAAsB,KAAK,SAAL,CAAe,cAAf,CAA8B,IAA9B,CAA1B,EAA+D;ADvJ7D,AXIK,AYoJL,AGhJF,QJRQ,OAAO,GAAG,eAAe,CAAC,OAAhC;ACyJD,AGhJD;AJRE,AXII,AeKN,MJTM,CAAC,CAAC,IXIF,IWJJ,EAAgB,GXIH;AWHX,AXIC,AYoJL,UAAM,CZzKF,EYyKK,GAAG,CZpJD,MYoJQ,IAAP,KAAgB,QAAhB,GAA2B,KDxJZ,CCwJkB,EAAjC,GAAsC,EDxJ9C,EAAiC,CCwJkB,IAAI,EAA3D,ODxJI,EAAiD,OAAO,CAAC,UAAzD;AACD,AXIG,AYoJN,GD1JE,MAEO,CCwJH,MZpJI,CAAC,GAAG,AYoJE,CZpJD,CAAT,CYoJa,KAAK,qBAAL,CAA2B,IAA3B,EAAiC,GAAjC,EAAsC,OAAtC,CAAnB;ANlIF,AKrBM,AIOJ,ETcF,EKrBM,IIOA,GJPO,CAAC,EIOF,CAAC,ETcE,CAAC,GAAD,EAAc,ASdvB,CJPA,CAAqB,GIOD,SAApB,EJPA,EAAqC,AIOJ,CAAC,MJPU,AIOJ,CJPK,AIOJ,QAAP,CAAgB,CJPlD,WIOJ,EAAoE;ATepE,AKrBG,AXGG,AYoJN,AGhJE,GJpDwE,CLkE1E,AKpBE,EIMA,CTcC,CAAC,AMkIA,IGhJI,CAAC,GTcT,CAAa,CMkIC,CZpJD,CAAC,CAAC,AeIb,CTcgB,ASdA,CHgJC,CZpJA,IAAgB,CAAC,EMkBvB,CMkIb,CZpJmB,AeIjB,CTc4B,ANlBW,AYoJX,AGhJC,OfJZ,CAA8B,MAA9B,EAAsC,CAAC,GAAG,CAA1C,AeIjB,CfJW,AeKP,MfL+D,AeKzD,CTaZ,ANlBsE,AeKzD,CfLP,EAAmE,AeKnE,CAAY,CAAD,IAAO,CAAC,CAAC,OAApB,CADJ,EACkC,KAAK,SADvC;AJLA,AXEM,AYoJN,AG/ID,KAHD,CHkJE,KG/IK,CH+IC,CAAC,EG/IE,YH+IT,CAAsB,KAAK,SAA3B,EAAsC,IAAtC,EAA4C,AG/IvC,EAAiC,QH+ItC;ANlIF,AKnBE,AXEM,AYoJP,AG/IE,STYE,ESZG,KTYR,GAAe,ESZZ,CTYe,ASZgB,CTYf,OAAnB,USZG,GACG,MAAM,CAAC,GAAP,CAAY,CAAD,IAAO,CAAC,CAAC,UAApB,CADH;ATaH,ANjBQ,AYoJT,AG9IE,ITWD,CSdO,ETcJ,CAAC,GSXG,ITWP,GAAc,KAAK,SAAnB;AACD,ANjBS,AYqJV,AG/II;AJTA,AXIM,AeMN,AL9JN,ECoJM,MAAM,CAAC,QAAP,CAAiB,CXIN,KAAL,CAAW,IAAX,CAAgB,SWJtB,CAAuC,eAAvC,EAAwD,SAAxD;ALsBJ,AKrBI,AXGuB,AeOvB,ETWJ,MKrBU,ELqBF,CAAC,ASXA,EJVM,GLqBP,AKrBU,AXGS,EMkBJ,ENlBQ,EAAE,CWHR,CAAC,IXGA,SWHR,CAAsB,CIUpC,GAAoC,GJVtB,CAAd,AIUA;ATYF,ANnBuC,AeQtC,STWI,ONnBkC,KAAK,EMmB5C,ANnB8C,CAAC,EMmBzB,KAAtB;AACD,AKtBG,AXEsB,AeSzB,MJXO,MAAM,CAAC,EXEL,MWFF,CAAiB,YAAjB,IAAiC,KAAK,KAAK,IAA/C,EAAqD;AACnD,AXEI,AUhJZ,cVgJY,SAAS;AMqBnB,AKtBM,AXEG,AeST,ALxIF,EJmJE,ASXA,MTWM,GAAA,QSXW,GAAA;ATYf,AKtBI,AXEC,AeSL,ALxIJ,IC6HQ,ILsBA,ESXE,GTWG,EKtBM,CAAC,MLsBZ,CAAe,ISXnB,CJXI,CAAyB,CIUd,CAEf,ETUI,CKtB8B,CAAC,GLsBD,IAAlC,EAAwC,AKtBX,CAAgB,IAAhB,CAAzB,EAAgD,WAAW,CAAC,UAA5D;ALuBF,AKtBC,AXEA,AeUH,ALzIJ,GCyHM,MAIO,IAAI,CAAC,CAAC,QAAN,EAAgB;ALuBxB,AKtBG,AXEH,AU/HL,IAAI,CVZ8D,CA6I9D,KUjIO,MAAP,KAAkB,WAAtB,EAAmC;AC8H3B,AIWJ,ALxIF,GAAC,KKwIK,CLxIC,CAAC,GKwIG,UAAL,IAAmB,ALxIlB,CAAN,KKwI8B,ALxIA,CKwIC,KLxIK,CAAC,EKwIb,KAAoB,SAA3C,CLxImC,CKwImB,ALxIzB,GAA4B,EAA1D,CAAD,EAAgE,IAAhE,CAAqE,OAArE;AJmJE,AKrBI,AIWF,ALxIL,MKwIK,KTUK,CSVC,CAAC,QAAP,CAAgB,YAAhB,CAA6B,ITUZ,ASVjB,KTUsB,cAAjB,CAAP,EAAyC;AACvC,AKrBE,AXEJ,AeSC,ALvIL,SV8HS,GMmBG,GNnBG,CAAX,IAAgB,CMmBC,GAAG,KAAK,INnBzB,EAA+B,QMmB7B;AACA,AKrBE,AXEF,AeSH,MfTG,CAAC,CAAC,GMmBG,ONnBL,CAAc,MMmBd,GAAsB,ENnBtB,CAA0B,CAA1B,UMmBA;AACA,AKrBE,AXEH,AeUH,MTSI,SAAS,CAAC,IAAD,CAAT;AACD,AKrBG,AXEL;AWDK;ALqBJ,AKpBI,AXrJa,IWqJb,MLoBE,CKpBK,CAAC,GLoBD,GAAG,KAAK,CKpBf,CAAqB,YLoBzB,EKpBI,EAAqC,OAAO,CAAC,UAA7C;AACA,AD9HD,MAAM,IC8HC,AD9HG,GAAG,CAAC,GC8HA,GAAG,CD9HJ,EAAgC,CC8HxB,ED9H2B,CC8H/B,EAAhB,GD9HY,KAChB,IAAI,8BAAJ,CAAmB,OAAnB,EAA4B,MAA5B,EAAoC,MAApC,EAA4C,kDAA5C,CADG;AJkJH,AKnBI,AD5HR,IC4HQ,ILmBA,GKnBO,CAAC,CLmBH,EKnBL,CAAY,ELmBF,YKnBV,ELmBJ,EAAwB;AACtB,AKnBE,iDAAwB,QAAxB,EAAkC,OAAlC;AEsEF,APlDD,AKnBE,AXDP,MAAM,GasEU,KbtEF,GAAG,CAAC,CasEZ,CAAqB,CbtEV,EAAc,KasEzB,CbtEW,CasE0B,IbtEe;AauExD,AFrEG,AXDH,AeWU,CJhFZ,CIgFY,MfXJ,AeWU,CF2DT,AE3DU,CF2DT,GbtEG,GAAG,GAAG,CAAC,MAAJ,AeWE,CF2DT,CE3D2C,CF4D1C,AbvEmB,MAAM,CAAC,MAAlC;AawEQ,APpDN,AKbJ,AXNE,AeWE,EF4DM,IAFD,EPlDD,CNnBC,EauE4B,GbvEvB,IAAI,CMmBC,ANnBV,CMmBW,GNnBG,EMmBJ,CAAf,ANnBsB,CAAC,CMmBC,INnBL,CAAU,KAAV,MAAqB,MAA1C;AawEE,APpDE,ANnBL,AeWG,CfdJ,Sa0EU,APpDA,KAAK,KOoDK,APpDA,GOoDG,EPpDE,KAAnB,EAA0B;AOqD1B,APpDE,ASRJ,YF4DQ,CPpDC,EOoDP,GAAS,OPpDP,CAAkB,KAAlB;AOqDA,APpDD,ANMA,AYgIK,AG9IR,MfcS,GYgIM,CG9IT,IF4DI,KAAK,KE5DK,EfcS,CedN,EfcU,CYgIzB,CACN,CG/I0B,CF4DxB,Ab9C4B,EYgIxB,EZhIgD,AYiInC,CG/IE,EH8If,AG9IR,Cfc4D,CAAC,AYiIpB,KZjIe,GYgIhD,EZhI+D,AYiID,CZjIE,CAArE,EAEP;Aa6CQ,APpDH,ANQL,AY+HI,AG/IA,AL1IG,KJ8IH,CI9IS,GAAG,CK0IN,CTQC,AMuIA,CFzRQ,CAAC,EGsML,APpDA,CSRX,CAAa,GF4DG,APpDA,AIlJD,EAAgC,GAAG,KGsMvC,CAAgB,AHtMZ,CJkJa,ESR5B,EALgD,ALpIhD,CK0IA,GL1II,IGqMO,CAA8B,QAA9B,CAAP,QPpDG,EAAqC,SIjJ5C,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC,KAAvC,EAA8C,kDAA9C,CADG;AGuMA,APpDD,AMuIA,OCvFiB,IPhDZ,sBAAL,CAA4B,KAA5B;AACD,AMuIC,AG/IF,KTMO,CMyIL,EG/IE,CH+IC,ENvIE,CMuIF,GNvIM,KAAK,ESRE,KAAK,KTQK,IAArB,EAA2B,SSRlC,EAA6C;AF4D3C,APnDA,AMuIE,AG/ID,MF2DD,KPnDK,ASRC,IH+II,CCpFA,EAAE,EDoFgC,ECzF3B,AEtDhB,CTQD,AMuIU,AG9IL,CTOa,AMuIhB,KNvIF,ASRC,CAEO,cAFP,EAGO,KAAK,UAHZ,EAIO;AFwDR,APnDD,AMuIE,AG5IQ,KTGJ,COqDL,CDgFK,CGxII,GTKJ,IAAI,ESLS,CFwDN,CExDQ,CFwDN,IExDW,CTKN,CAAC,KAAD,CAAd,CSLG,CTKoB;AO6CX,AP5CjB,ANIC,AeVmC,KFkDtC,CbxCS,EeV6B,GTM/B,ONIc,EeV6B,CfU1B,CeV4B,KTMlD,ANI4B,CMJN,KAAtB,ENIoC,C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B,AMuIlB,QNvI0B,CAAC,cAAT,CAAwB,aAAxB,CAAlB;AO2DL,AP1DI,AMuIA;;AC3EL,AP3DI,AMuIA,MC5EE,GP3DG,AMuIA,KNvIL,GO2Da,AP3DA,CMuIb,EC3EA,CAAC,CP5DD,AMuIkB,IAAlB,KC3EA,EAAiC,KAAjC,EAAgD,IAAhD,KAAqE;AACnE,AP5DH,EO4DG,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA6B,IAA7B,EAAmC,UAAnC;AACD,AD0ED,CC7EJ,QD6ES,sBAAL,GAPuB,CAQvB;ANtIM,EAAA,sBAAsB,CAAC,KAAD,EAAsB;AO6DtD,AP5DI,MO4DE,IP5DI,QAAQ,CO4DC,EP5DE,CO4DC,CAAC,GP5DG,OO4DJ,AP5DD,CAAa,CO4DqB,OAAjC,MACjB,CP7DgB,CAA6B,KAA7B,CAAjB;AO8DE,AFvEC,AC+IH,AGrVK,EF6QH,IAAI,AFvEG,EEuED,CDwEH,CGrVA,CAAA,CJsMU,GACf,CEqEC,AFrEA,CIvMI,GAEqC,EJqM1C,EACC,QC6ID,CD9IA,EAEC,AC4I8B,IAAI,AGrV9B,GJuML,AC8I+B,EAA/B,CATuB,CAUvB,CD7IgC;AEqE9B,AP9DF,AKNE,AC6IF,ECzEE,IFpEI,CAAC,CLMH,GO8DO,EAAE,AP9DJ,CKNH,ILMF,AKNc,MEkEjB,CFlEwB,KLMC,EKNR,KAAmB,QAA/B,IAA2C,CAAC,OAAO,CAAC,MLMtD,GKNF,CLOE,CKPiE,ILO5D,KAAL,CAAW,QAAX,KAAwB,QAD5B,EACsC;AO8DpC,AP7DA,AKPE,AC6IJ,ECzEE,GAAG,EAAE,GFpEG,CLOH,GO6DO,AFpEA,CEoEC,CP7Db,CAAW,CO0DZ,CFjES,CAAU,GLOlB,CAAkB,KAAK,CAAC,MAAxB,qBKPQ,CAAN;AEqEF,AP7DD,AKPE,AC6IH,ECzEE,GPhEF,MAGO;AOyDN,APxDC,COuDgB,CAAtB;APtDM,AKRA,AC6IF,QD7IQ,AC6IJ,KAAK,ID7IQ,GAAG,OAAO,AC6IvB,CD7IwB,AC6IJ,SD7ItB,gBC6I+C,CAAC,YAAD,EAAe,IAAf,CAA7C,CAAJ,EAAwE;ACvE5E,AP7DM,AMqIA,MCxEA,MDwEM,KAAK,GAAG,KA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","file":"RequestItem.841c0915.js","sourceRoot":"..","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, _options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise =\n      new Promise((res) => this._enableUpdatingResolver = res);\n  private _enableUpdatingResolver: (() => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options = ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n *\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the internalProperty decorator.\n *\n * @example\n *\n *     class MyElement {\n *       @property({ type: Boolean })\n *       clicked = false;\n *     }\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @query('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @queryAsync('#first')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n *\n *     // external usage\n *     async doSomethingWithFirst() {\n *      (await aMyElement.first).doSomething();\n *     }\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n *\n *     class MyElement {\n *       @queryAll('div')\n *       divs;\n *\n *       render() {\n *         return html`\n *           <div id=\"first\"></div>\n *           <div id=\"second\"></div>\n *         `;\n *       }\n *     }\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *       clicked = false;\n *\n *       render() {\n *         return html`\n *           <div @click=${this._onClick}`>\n *             <button></button>\n *           </div>\n *         `;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n */\nexport function queryAssignedNodes(\n    slotName: string = '', flatten: boolean = false) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const selector = `slot${slotName ? `[name=${slotName}]` : ''}`;\n        const slot = this.renderRoot.querySelector(selector);\n        return slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Render method used to render the value to the element's DOM.\n   * @param result The value to render.\n   * @param container Node into which to render.\n   * @param options Element name.\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResult|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n    if (userStyles === undefined) {\n      this._styles = [];\n    } else if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles =\n          (styles: CSSResultArray, set: Set<CSSResult>): Set<CSSResult> =>\n              styles.reduceRight(\n                  (set: Set<CSSResult>, s) =>\n                      // Note: On IE set.add() does not return the set\n                  Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n                  set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResult>());\n      const styles: CSSResult[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = [userStyles];\n    }\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's NodePart - typically a TemplateResult.\n   * Setting properties inside this method will *not* trigger the element to\n   * update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n","import { LitElement, html, css } from 'lit-element';\n\n\nclass RequestItem extends LitElement {\n  constructor(){\n    super();\n    console.log(this.request);\n  }\n\n  static get properties() {\n    return {\n      request: { attribute: true, reflect: true, type: Object }\n    }\n  }\n\n  static get styles(){\n    return css`\n      .devtools__request_item {\n        display: flex;\n        padding: 8px;\n        align-items: center;\n        background: white;\n        border-bottom: 1px solid rgba(22, 47, 86, 0.1);\n      }\n      .devtools__request_item__actions_wrapper {\n        display: flex;\n        margin-right: 12px;\n      }\n      .devtools__request_item__action {\n        padding: 0;\n        width: 16px;\n        height: 16px;\n        border: 1px solid;\n        line-height: 14px;\n        border-radius: 50%;\n        color: white;\n        cursor: pointer;\n      }\n\n      .resolve {\n        font-size: 11px;\n        background: #24A832;\n      }\n      \n      .reject {\n        font-size: 12px;\n        background: #EE6619;\n      }\n\n      .settings {\n        font-size: 16px;\n      }\n\n      .devtools__request_item__action:first-child {\n        margin-right: 4px\n      }\n\n      .devtools__request_item__name__wrapper {\n        flex: 1;\n      }\n\n      .devtools__request_item__name{\n        background: rgba(29, 28, 29, 0.04);\n        color: rgb(224, 30, 90);\n        border-radius: 3px;\n        padding: 1px 3px 2px 3px;\n        border: 1px solid rgba(22, 47, 86, 0.1);\n        margin: 0;\n      }\n    `\n  }\n\n  handleResolve(e){\n    let myEvent = new CustomEvent('request-resolve', {\n      detail: {\n        request_id: this.request.id,\n      },\n      bubbles: true, \n      composed: true });\n    this.dispatchEvent(myEvent);\n  }\n\n  render(){\n    return html`\n      <div class=\"devtools__request_item\">\n        <div class=\"devtools__request_item__actions_wrapper\">\n          <button class=\"devtools__request_item__action resolve\" @click=\"${this.handleResolve}\">\n            ✓\n          </button>\n          <button class=\"devtools__request_item__action reject\" @click=\"${this.handleResolve}\">\n            ×\n          </button>\n        </div>\n        <div class=\"devtools__request_item__name__wrapper\">\n          <code class=\"devtools__request_item__name\">${this.request.name}</code>\n        </div>\n        <button class=\"devtools__request_item__action settings\" @click=\"${this.handleResolve}\">\n          ⚙\n        </button>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('fetch-devtools-requestitem', RequestItem);"]}